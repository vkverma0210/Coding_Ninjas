/* Anandi and Jagya were getting married again when they have achieved proper age.
Dadi Sa invited Alok Nath to do the kanyadaan and give blessings.
Alok Nath has 2 blessings.
Each bessing is in the form of a string consisting of lowercase charaters(a - z) only.
But he can give only one blessing of K length because some priest told him to do so.
Thus he decides to generate a blessing using the other two blessings.
While doing this he wants to ensure that happiness brought into their life by his blessing is maximum.

The generated blessing is a common subsequence of length K of the two blessings he has.
Happiness of the blessing he generates is calculated by the sum of ASCII values of characters in the blessing and 
he wants the happiness to be maximum.
If he is not able to generate a common subsequence of length K then the happiness is 0(zero).
Alok Nath comes to you and asks you to find the maximum happiness that can be generated by the two blessings he has. */

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

ll maxHappiness(string s1, string s2, int k, int ***dp)
{
    int m = s1.length();
    int n = s2.length();

    if (k == 0)
    {
        return 0;
    }

    if (m == 0 || n == 0)
    {
        return INT_MIN;
    }

    if (dp[m][n][k] != -1)
    {
        return dp[m][n][k];
    }

    if (s1[0] != s2[0])
    {
        //s1 not included
        ll option1 = maxHappiness(s1.substr(1), s2, k, dp);

        // s2 not included
        ll option2 = maxHappiness(s1, s2.substr(1), k, dp);

        ll ans = max(option1, option2);
        dp[m][n][k] = ans;

        return ans;
    }

    // Both not included
    ll option1 = s1[0] + maxHappiness(s1.substr(1), s2.substr(1), k - 1, dp);

    // S1 not included
    ll option2 = maxHappiness(s1.substr(1), s2, k, dp);

    // S2 not included
    ll option3 = maxHappiness(s1, s2.substr(1), k, dp);

    ll ans = max(option1, max(option2, option3));
    dp[m][n][k] = ans;

    return ans;
}

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        string s1, s2;
        int k;
        cin >> s1;
        cin >> s2;
        cin >> k;

        int m = s1.length();
        int n = s2.length();

        int ***dp = new int **[m + 1];
        for (int i = 0; i <= m; i++)
        {
            dp[i] = new int *[n + 1];
            for (int j = 0; j <= n; j++)
            {
                dp[i][j] = new int[k + 1];
            }
        }

        for (int i = 0; i <= m; i++)
        {
            for (int j = 0; j <= n; j++)
            {
                for (int x = 0; x <= k; x++)
                {
                    dp[i][j][x] = -1;
                }
            }
        }

        ll ans = maxHappiness(s1, s2, k, dp);

        for (int i = 0; i <= m; i++)
        {
            for (int j = 0; j <= n; j++)
            {
                delete[] dp[i][j];
            }
            delete[] dp[i];
        }

        delete[] dp;

        if (ans < 0)
        {
            cout << 0 << endl;
        }
        else
        {
            cout << ans << endl;
        }
    }

    return 0;
}
